services:

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    image: restaurant_app
    restart: always
    container_name: backend
    env_file:
      - .env
    networks:
      - restaurant
    ports:
      - "8080:8080"
    volumes:
      - ./source/admin:/source/admin
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbit:
        condition: service_healthy
    command: /bin/sh -c "python -m alembic -c ../alembic.ini upgrade head
                      && python -m uvicorn main:app --host 0.0.0.0 --port 8080"


  db:
    image: postgres:alpine
    restart: always
    container_name: db
    env_file:
      - .env
    networks:
      - restaurant
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 30s
      retries: 5


  redis:
    image: redis:alpine
    restart: always
    container_name: redis
    env_file:
      - .env
    networks:
      - restaurant
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5


  rabbit:
    image: rabbitmq:alpine
    hostname: rabbitmq
    restart: always
    container_name: rabbit
    env_file:
      - .env
    networks:
      - restaurant
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 30s
      retries: 5


  worker:
    image: restaurant_app
    restart: always
    container_name: worker
    env_file:
      - .env
    networks:
      - restaurant
    volumes:
      - ./source/admin:/source/admin
    depends_on:
      - backend
    command: /bin/sh -c "celery -A task worker -l INFO"


  flower:
    image: restaurant_app
    container_name: flower
    restart: always
    networks:
      - restaurant
    ports:
      - "5555:5555"
    env_file:
      - .env
    depends_on:
      - worker
    command: /bin/sh -c "celery -A task flower --port=5555"


  beat:
    image: restaurant_app
    container_name: beat
    networks:
      - restaurant
    depends_on:
      - backend
    command: /bin/sh -c "celery -A task beat -l INFO"

networks:
  restaurant:
    name: restaurant
